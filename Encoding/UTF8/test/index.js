/* eslint-disable no-magic-numbers */
import {
	stringToCodePoints
} from 'j0';
import UTF8 from '..';

describe('Encoding.UTF8', function () {

	it('should have name', function () {
		assert.equal(UTF8.name, 'UTF8');
	});

	it('should have labels', function () {
		assert.deepEqual(Array.from(UTF8.labels), [
			'unicode-1-1-utf-8',
			'utf-8',
			'utf8'
		]);
	});

	describe('Encoding.UTF8.Encoder', function () {

		it('should encode "abc"', function () {
			const src = 'abc';
			const expected = [
				0x61,
				0x62,
				0x63
			];
			const output = [];
			UTF8.Encoder.run(stringToCodePoints(src), output);
			assert.deepEqual(output, expected);
		});

		it('should encode "こんにちは"', function () {
			const src = 'こんにちは';
			const expected = [
				0xE3,
				0x81,
				0x93,
				0xE3,
				0x82,
				0x93,
				0xE3,
				0x81,
				0xAB,
				0xE3,
				0x81,
				0xA1,
				0xE3,
				0x81,
				0xAF
			];
			const output = [];
			UTF8.Encoder.run(stringToCodePoints(src), output);
			assert.deepEqual(output, expected);
		});

		it('should encode "𐀀𐀁𐀂𐀃𐀄𐀅𐀆𐀇𐀈𐀉𐀊𐀋𐀌𐀍𐀎𐀏"', function () {
			const src = '𐀀𐀁𐀂𐀃𐀄𐀅𐀆𐀇𐀈𐀉𐀊𐀋𐀌𐀍𐀎𐀏';
			const expected = [
				0xF0, 0x90, 0x80, 0x80,
				0xF0, 0x90, 0x80, 0x81,
				0xF0, 0x90, 0x80, 0x82,
				0xF0, 0x90, 0x80, 0x83,
				0xF0, 0x90, 0x80, 0x84,
				0xF0, 0x90, 0x80, 0x85,
				0xF0, 0x90, 0x80, 0x86,
				0xF0, 0x90, 0x80, 0x87,
				0xF0, 0x90, 0x80, 0x88,
				0xF0, 0x90, 0x80, 0x89,
				0xF0, 0x90, 0x80, 0x8A,
				0xF0, 0x90, 0x80, 0x8B,
				0xF0, 0x90, 0x80, 0x8C,
				0xF0, 0x90, 0x80, 0x8D,
				0xF0, 0x90, 0x80, 0x8E,
				0xF0, 0x90, 0x80, 0x8F
			];
			const output = [];
			UTF8.Encoder.run(stringToCodePoints(src), output);
			assert.deepEqual(output, expected);
		});

	});

	describe('Encoding.UTF8.Decoder', function () {

		it('should decode "abc"', function () {
			const src = [
				0x61,
				0x62,
				0x63
			];
			const expected = [
				0x61,
				0x62,
				0x63
			];
			const output = [];
			UTF8.Decoder.run(src, output);
			assert.deepEqual(output, expected);
		});

		it('should decode "こんにちは"', function () {
			const src = [
				0xE3,
				0x81,
				0x93,
				0xE3,
				0x82,
				0x93,
				0xE3,
				0x81,
				0xAB,
				0xE3,
				0x81,
				0xA1,
				0xE3,
				0x81,
				0xAF
			];
			const expected = [
				0x3053, 0x3093, 0x306b, 0x3061, 0x306f
			];
			const output = [];
			UTF8.Decoder.run(src, output);
			assert.deepEqual(output, expected);
		});

		it('should decode "𐀀𐀁𐀂𐀃𐀄𐀅𐀆𐀇𐀈𐀉𐀊𐀋𐀌𐀍𐀎𐀏"', function () {
			const src = [
				0xF0, 0x90, 0x80, 0x80,
				0xF0, 0x90, 0x80, 0x81,
				0xF0, 0x90, 0x80, 0x82,
				0xF0, 0x90, 0x80, 0x83,
				0xF0, 0x90, 0x80, 0x84,
				0xF0, 0x90, 0x80, 0x85,
				0xF0, 0x90, 0x80, 0x86,
				0xF0, 0x90, 0x80, 0x87,
				0xF0, 0x90, 0x80, 0x88,
				0xF0, 0x90, 0x80, 0x89,
				0xF0, 0x90, 0x80, 0x8A,
				0xF0, 0x90, 0x80, 0x8B,
				0xF0, 0x90, 0x80, 0x8C,
				0xF0, 0x90, 0x80, 0x8D,
				0xF0, 0x90, 0x80, 0x8E,
				0xF0, 0x90, 0x80, 0x8F
			];
			const expected = [
				0x10000,
				0x10001,
				0x10002,
				0x10003,
				0x10004,
				0x10005,
				0x10006,
				0x10007,
				0x10008,
				0x10009,
				0x1000a,
				0x1000b,
				0x1000c,
				0x1000d,
				0x1000e,
				0x1000f
			];
			const output = [];
			UTF8.Decoder.run(src, output);
			assert.deepEqual(output, expected);
		});

	});

});
